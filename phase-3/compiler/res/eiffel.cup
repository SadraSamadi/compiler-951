/**********************************************************************
* Compiler Project â€“ Phase 3                                          *
* Language : Eiffel                                                   *
* Team :                                                              *
*   1. Sadra Samadi             - 9312268122                          *
*   2. Hamid Hosseini Nejad     - 9312268110                          *
***********************************************************************/

import java_cup.runtime.*;
import java.util.*;

parser code {:

    public void report_error(String message, Object info) {
        String error = "Error";
        if (info instanceof Symbol) {
            Symbol symbol = ((Symbol) info);
            error += " in line " + (symbol.left + 1);
            error += ", column " + (symbol.right + 1);
        }
        error += " : " + message;
        System.err.println(error);
        System.exit(0);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

:};

terminal                            CLASS;
terminal                            CREATE;
terminal                            FEATURE;
terminal                            INTEGER_TYPE;
terminal                            STRING_TYPE;
terminal                            DO;
terminal                            END;
terminal                            IF;
terminal                            THEN;
terminal                            ELSE;
terminal                            FROM;
terminal                            UNTIL;
terminal                            LOOP;
terminal                            PRINT;
terminal                            TRUE;
terminal                            FALSE;

terminal                            ASSIGN;
terminal                            COLON;
terminal                            SEMICOLON;
terminal                            COMMA;
terminal                            EQUAL;
terminal                            GREATER;
terminal                            GREATER_EQUAL;
terminal                            SMALLER;
terminal                            SMALLER_EQUAL;
terminal                            PLUS;
terminal                            MINUS;
terminal                            UMINUS;
terminal                            TIMES;
terminal                            DIVIDE;
terminal                            MOD;
terminal                            LPAREN;
terminal                            RPAREN;

terminal String                     IDENTIFIER;
terminal Integer                    INTEGER;
terminal String                     STRING_LITERAL;

non terminal Object                 app;
non terminal Object                 feature_list;
non terminal Eiffel.Var             defination;
non terminal Class<?>               defination_type;
non terminal Object                 function;
non terminal Object                 statement_list;
non terminal Object                 statement;
non terminal List<Eiffel.Var>       argument_list;
non terminal List<Eiffel.Var>       arguments;
non terminal Eiffel.Var             argument;
non terminal Eiffel.Var             expr;
non terminal Eiffel.Var             number;
non terminal Object                 conditional;
non terminal Boolean                condition;
non terminal Object                 loop;
non terminal List<Object>           parameter_list;
non terminal List<Object>           parameters;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left UMINUS;

app ::= CLASS IDENTIFIER:cls CREATE IDENTIFIER:mk FEATURE feature_list END  {: Eiffel.call(); :}
| /* empty */;

feature_list ::= feature_list defination | feature_list function | /* empty */;

defination ::= IDENTIFIER:id COLON defination_type:t {: RESULT = Eiffel.define(id, t); :};

defination_type ::= INTEGER_TYPE {: RESULT = Integer.class; :} | STRING_TYPE {: RESULT = String.class; :};

function ::= IDENTIFIER:id arguments:a DO statement_list END
{: Eiffel.args = a; :};

arguments ::= LPAREN RPAREN {: RESULT = new ArrayList<Eiffel.Var>(); :}
| LPAREN argument_list:al RPAREN {: RESULT = al; :}
| /* empty */ {: RESULT = new ArrayList<Eiffel.Var>(); :};

argument_list ::= argument_list:al SEMICOLON defination:d {: al.add(d); RESULT = al; :}
| defination:d {: List<Eiffel.Var> l = new ArrayList<>(); l.add(d); RESULT = l; :};

statement_list ::= statement_list statement | /* empty */;

statement ::= IDENTIFIER:id ASSIGN expr:e {: Eiffel.assign(id, e.value); :}
| IDENTIFIER:id LPAREN parameters:p RPAREN {: Eiffel.function = id; Eiffel.params = p; :}
| PRINT LPAREN STRING_LITERAL:s RPAREN
| conditional
| loop;

parameters ::= parameter_list:pl {: RESULT = pl; :}
| /* empty */ {: RESULT = new ArrayList<Object>(); :};

parameter_list ::= parameter_list:pl COMMA expr:e {: pl.add(e.value); RESULT = pl; :}
| expr:e {: List<Object> l = new ArrayList<Object>(); l.add(e.value); RESULT = l; :};

expr ::= number:n {: RESULT = n; :} | STRING_LITERAL:s {: RESULT = new Eiffel.Var(null, String.class, s); :};

number ::= number:n1 PLUS number:n2 {: RESULT = new Eiffel.Var(null, Integer.class, ((int)n1.value) + ((int)n2.value)); :}
| number:n1 MINUS number:n2 {: RESULT = new Eiffel.Var(null, Integer.class, ((int)n1.value) - ((int)n2.value)); :}
| number:n1 TIMES  number:n2 {: RESULT = new Eiffel.Var(null, Integer.class, ((int)n1.value) * ((int)n2.value)); :}
| number:n1 DIVIDE  number:n2 {: RESULT = new Eiffel.Var(null, Integer.class, ((int)n1.value) / ((int)n2.value)); :}
| number:n1 MOD  number:n2 {: RESULT = new Eiffel.Var(null, Integer.class, ((int)n1.value) % ((int)n2.value)); :}
| MINUS  number:n {: n.value = -((int)n.value); RESULT = n; :} %prec UMINUS
| LPAREN  number:n RPAREN {: RESULT = n; :}
| INTEGER:i {: RESULT = new Eiffel.Var(null, Integer.class, i); :}
| IDENTIFIER:id {: RESULT = Eiffel.get(id); :};

conditional ::= IF condition:c
THEN statement_list
ELSE statement_list
END;

condition ::= expr:e1 EQUAL expr:e2
| expr:e1 GREATER expr:e2
| expr:e1 GREATER_EQUAL expr:e2
| expr:e1 SMALLER expr:e2
| expr:e1 SMALLER_EQUAL expr:e2
| TRUE
| FALSE;

loop ::= FROM statement
UNTIL
condition:c
LOOP statement_list END;
