/* The following code was generated by JFlex 1.6.1 */

/**********************************************************************
* Compiler Project â€“ Phase 1                                          *
***********************************************************************/


public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\14\1\13\1\15\1\12\1\12\22\0\1\14\1\55\1\16"+
    "\2\0\1\51\1\56\1\0\1\62\1\63\1\47\1\10\1\61\1\11"+
    "\1\6\1\50\1\3\11\2\1\0\1\60\1\52\1\53\1\54\2\0"+
    "\4\5\1\7\1\46\15\1\1\45\1\1\1\36\1\1\1\4\2\1"+
    "\1\66\1\0\1\67\1\0\1\17\1\0\1\26\1\43\1\24\1\37"+
    "\1\23\1\33\1\44\1\31\1\30\1\1\1\42\1\25\1\1\1\20"+
    "\1\21\1\41\1\40\1\32\1\27\1\22\1\34\1\1\1\35\1\4"+
    "\2\1\1\64\1\57\1\65\7\0\1\15\u1fa2\0\1\15\1\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\1\17\2\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\0\1\31\11\2"+
    "\1\32\1\2\1\33\5\2\1\34\3\2\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\27\1\3\3\2\1\43"+
    "\5\2\1\44\12\2\1\0\1\45\1\46\1\2\1\47"+
    "\3\2\1\50\4\2\1\51\1\52\2\2\1\53\1\2"+
    "\1\0\2\2\1\54\1\55\6\2\1\56\1\57\1\27"+
    "\1\60\1\61\1\62\5\2\1\63\1\64\1\65\2\2"+
    "\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\70\0\70\0\u0118"+
    "\0\u0150\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\70\0\70\0\70\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\u0620\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0658\0\u0690\0\u06c8\0\u0188\0\70\0\u0700"+
    "\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\160\0\u08f8\0\160\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\160\0\u0a48\0\u0a80\0\u0ab8\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\u0af0\0\u0690\0\u0b28\0\u0b60\0\u0b98\0\160"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\160\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\160\0\160\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\160\0\u1068\0\u10a0\0\u10d8\0\u1110\0\160\0\160\0\u1148"+
    "\0\u1180\0\160\0\u11b8\0\u11f0\0\u1228\0\u1260\0\160\0\160"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\160\0\160"+
    "\0\u11f0\0\160\0\160\0\160\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\160\0\160\0\160\0\u1500\0\u1538\0\160\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\3\1\6\1\3\1\7"+
    "\1\10\3\11\1\2\1\12\1\2\1\13\1\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\1\21\1\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\5\3\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\71\0\5\3\1\0\1\3\7\0\30\3\23\0"+
    "\2\4\2\0\1\53\63\0\2\4\1\54\1\0\1\53"+
    "\72\0\1\55\70\0\3\11\53\0\13\56\1\0\2\56"+
    "\1\57\51\56\1\0\5\3\1\0\1\3\7\0\2\3"+
    "\1\60\25\3\22\0\5\3\1\0\1\3\7\0\12\3"+
    "\1\61\15\3\22\0\5\3\1\0\1\3\7\0\1\3"+
    "\1\62\4\3\1\63\21\3\22\0\5\3\1\0\1\3"+
    "\7\0\6\3\1\64\3\3\1\65\1\66\14\3\22\0"+
    "\5\3\1\0\1\3\7\0\2\3\1\67\25\3\22\0"+
    "\5\3\1\0\1\3\7\0\6\3\1\70\1\3\1\71"+
    "\17\3\22\0\5\3\1\0\1\3\7\0\1\3\1\72"+
    "\12\3\1\73\13\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\74\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\75\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\1\3\1\76\26\3\22\0\5\3\1\0\1\3\7\0"+
    "\12\3\1\77\15\3\22\0\5\3\1\0\1\3\7\0"+
    "\2\3\1\100\25\3\22\0\5\3\1\0\1\3\7\0"+
    "\2\3\1\101\1\3\1\102\23\3\22\0\5\3\1\0"+
    "\1\3\7\0\13\3\1\103\14\3\22\0\5\3\1\0"+
    "\1\3\7\0\7\3\1\104\20\3\74\0\1\105\67\0"+
    "\1\106\67\0\1\107\67\0\1\110\72\0\1\111\70\0"+
    "\1\112\12\0\2\113\66\0\2\114\1\0\1\114\1\0"+
    "\1\114\13\0\2\114\1\0\1\114\4\0\1\114\3\0"+
    "\1\114\3\0\1\114\2\0\1\114\21\0\12\55\2\0"+
    "\1\55\1\0\52\55\1\0\5\3\1\0\1\3\7\0"+
    "\3\3\1\115\24\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\116\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\10\3\1\117\7\3\1\120\7\3\22\0\5\3\1\0"+
    "\1\3\7\0\10\3\1\121\17\3\22\0\5\3\1\0"+
    "\1\3\7\0\7\3\1\122\20\3\22\0\5\3\1\0"+
    "\1\3\7\0\4\3\1\123\23\3\22\0\5\3\1\0"+
    "\1\3\7\0\4\3\1\124\23\3\22\0\5\3\1\0"+
    "\1\3\7\0\2\3\1\125\25\3\22\0\5\3\1\0"+
    "\1\3\7\0\6\3\1\126\21\3\22\0\5\3\1\0"+
    "\1\3\7\0\12\3\1\127\15\3\22\0\5\3\1\0"+
    "\1\3\7\0\21\3\1\130\6\3\22\0\5\3\1\0"+
    "\1\3\7\0\7\3\1\131\20\3\22\0\5\3\1\0"+
    "\1\3\7\0\20\3\1\132\7\3\22\0\5\3\1\0"+
    "\1\3\7\0\4\3\1\133\23\3\22\0\5\3\1\0"+
    "\1\3\7\0\11\3\1\134\16\3\22\0\5\3\1\0"+
    "\1\3\7\0\14\3\1\135\7\3\1\136\3\3\22\0"+
    "\5\3\1\0\1\3\7\0\15\3\1\137\12\3\22\0"+
    "\5\3\1\0\1\3\7\0\6\3\1\140\21\3\23\0"+
    "\2\113\3\0\1\141\61\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\142\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\1\3\1\143\26\3\22\0\5\3\1\0\1\3\7\0"+
    "\15\3\1\144\12\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\145\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\10\3\1\146\17\3\22\0\5\3\1\0\1\3\7\0"+
    "\5\3\1\147\22\3\22\0\5\3\1\0\1\3\7\0"+
    "\7\3\1\150\20\3\22\0\5\3\1\0\1\3\7\0"+
    "\22\3\1\151\5\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\152\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\15\3\1\153\12\3\22\0\5\3\1\0\1\3\7\0"+
    "\3\3\1\154\24\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\155\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\1\3\1\156\26\3\22\0\5\3\1\0\1\3\7\0"+
    "\20\3\1\157\7\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\160\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\15\3\1\161\12\3\22\0\5\3\1\0\1\3\7\0"+
    "\4\3\1\162\23\3\22\0\5\3\1\0\1\3\7\0"+
    "\10\3\1\163\17\3\31\0\2\164\57\0\5\3\1\0"+
    "\1\3\7\0\13\3\1\165\14\3\22\0\5\3\1\0"+
    "\1\3\7\0\11\3\1\166\16\3\22\0\5\3\1\0"+
    "\1\3\7\0\10\3\1\167\17\3\22\0\5\3\1\0"+
    "\1\3\7\0\23\3\1\170\4\3\22\0\5\3\1\0"+
    "\1\3\7\0\3\3\1\171\24\3\22\0\5\3\1\0"+
    "\1\3\7\0\13\3\1\172\14\3\22\0\5\3\1\0"+
    "\1\3\7\0\11\3\1\173\16\3\22\0\5\3\1\0"+
    "\1\3\7\0\15\3\1\174\12\3\22\0\5\3\1\0"+
    "\1\3\7\0\14\3\1\175\13\3\22\0\5\3\1\0"+
    "\1\3\7\0\13\3\1\176\14\3\22\0\5\3\1\0"+
    "\1\3\7\0\25\3\1\177\2\3\22\0\5\3\1\0"+
    "\1\3\7\0\4\3\1\200\23\3\23\0\2\201\65\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\202\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\14\3\1\203\13\3\22\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\204\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\11\3\1\205\16\3\22\0"+
    "\5\3\1\0\1\3\7\0\13\3\1\206\14\3\22\0"+
    "\5\3\1\0\1\3\7\0\13\3\1\207\14\3\22\0"+
    "\5\3\1\0\1\3\7\0\11\3\1\210\16\3\22\0"+
    "\5\3\1\0\1\3\7\0\13\3\1\211\14\3\22\0"+
    "\5\3\1\0\1\3\7\0\3\3\1\212\24\3\22\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\213\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\214\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\1\3\1\215\26\3\22\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\216\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\4\3\1\217\23\3\22\0"+
    "\5\3\1\0\1\3\7\0\20\3\1\220\7\3\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5488];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\22\1\3\11\6\1\10\11"+
    "\1\1\1\0\1\1\1\0\1\11\25\1\6\11\26\1"+
    "\1\0\22\1\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                Token token = new Token(Constants.EOF, "", yyline + 1, yycolumn + 1); token.print("End Of File !"); return token;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Token token = new Token(Constants.ERROR, yytext(), yyline + 1, yycolumn + 1); token.print("Error, Invalid Character! : "); return token;
            }
          case 56: break;
          case 2: 
            { Token token = new Token(Constants.ID, yytext(), yyline + 1, yycolumn + 1); token.print("Identifier : "); return token;
            }
          case 57: break;
          case 3: 
            { Token token = new Token(Constants.INTEGERVAL, yytext(), yyline + 1, yycolumn + 1); token.print("Integer Value : "); return token;
            }
          case 58: break;
          case 4: 
            { Token token = new Token(Constants.DOT, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 59: break;
          case 5: 
            { Token token = new Token(Constants.PLUS, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 60: break;
          case 6: 
            { Token token = new Token(Constants.MINUS, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 61: break;
          case 7: 
            { Token token = new Token(Constants.WHITESPACE, "", yyline + 1, yycolumn + 1); token.print("Whitespace !"); return token;
            }
          case 62: break;
          case 8: 
            { Token token = new Token(Constants.MULT, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 63: break;
          case 9: 
            { Token token = new Token(Constants.DIV, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 64: break;
          case 10: 
            { Token token = new Token(Constants.MOD, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 65: break;
          case 11: 
            { Token token = new Token(Constants.LT, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 66: break;
          case 12: 
            { Token token = new Token(Constants.EQ, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 67: break;
          case 13: 
            { Token token = new Token(Constants.GT, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 68: break;
          case 14: 
            { Token token = new Token(Constants.NOT, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 69: break;
          case 15: 
            { Token token = new Token(Constants.SEMICOLON, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 70: break;
          case 16: 
            { Token token = new Token(Constants.COMMA, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 71: break;
          case 17: 
            { Token token = new Token(Constants.LPAREN, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 72: break;
          case 18: 
            { Token token = new Token(Constants.RPAREN, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 73: break;
          case 19: 
            { Token token = new Token(Constants.LBRACE, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 74: break;
          case 20: 
            { Token token = new Token(Constants.RBRACE, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 75: break;
          case 21: 
            { Token token = new Token(Constants.LBRACK, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 76: break;
          case 22: 
            { Token token = new Token(Constants.RBRACK, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 77: break;
          case 23: 
            { Token token = new Token(Constants.DOUBLEVAL, yytext(), yyline + 1, yycolumn + 1); token.print("Double Value : "); return token;
            }
          case 78: break;
          case 24: 
            { Token token = new Token(Constants.COMMENT, yytext(), yyline + 1, yycolumn + 1); token.print("Comment : "); return token;
            }
          case 79: break;
          case 25: 
            { Token token = new Token(Constants.STRINGVAL, yytext(), yyline + 1, yycolumn + 1); token.print("String Value : "); return token;
            }
          case 80: break;
          case 26: 
            { Token token = new Token(Constants.AS, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 81: break;
          case 27: 
            { Token token = new Token(Constants.IF, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 82: break;
          case 28: 
            { Token token = new Token(Constants.DO, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 83: break;
          case 29: 
            { Token token = new Token(Constants.LTEQ, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 84: break;
          case 30: 
            { Token token = new Token(Constants.EQEQ, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 85: break;
          case 31: 
            { Token token = new Token(Constants.GTEQ, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 86: break;
          case 32: 
            { Token token = new Token(Constants.NOTEQ, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 87: break;
          case 33: 
            { Token token = new Token(Constants.AND, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 88: break;
          case 34: 
            { Token token = new Token(Constants.OR, yytext(), yyline + 1, yycolumn + 1); token.print("Operator : "); return token;
            }
          case 89: break;
          case 35: 
            { Token token = new Token(Constants.END, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 90: break;
          case 36: 
            { Token token = new Token(Constants.ALL, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 91: break;
          case 37: 
            { Token token = new Token(Constants.NOTE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 92: break;
          case 38: 
            { Token token = new Token(Constants.THEN, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 93: break;
          case 39: 
            { Token token = new Token(Constants.ELSE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 94: break;
          case 40: 
            { Token token = new Token(Constants.LOOP, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 95: break;
          case 41: 
            { Token token = new Token(Constants.WHEN, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 96: break;
          case 42: 
            { Token token = new Token(Constants.VOID, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 97: break;
          case 43: 
            { Token token = new Token(Constants.TRUE, yytext(), yyline + 1, yycolumn + 1); token.print("Boolean Value : "); return token;
            }
          case 98: break;
          case 44: 
            { Token token = new Token(Constants.CLASS, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 99: break;
          case 45: 
            { Token token = new Token(Constants.CHECK, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 100: break;
          case 46: 
            { Token token = new Token(Constants.DEBUG, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 101: break;
          case 47: 
            { Token token = new Token(Constants.FALSE, yytext(), yyline + 1, yycolumn + 1); token.print("Boolean Value : "); return token;
            }
          case 102: break;
          case 48: 
            { Token token = new Token(Constants.ENSURE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 103: break;
          case 49: 
            { Token token = new Token(Constants.ELSEIF, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 104: break;
          case 50: 
            { Token token = new Token(Constants.CREATE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 105: break;
          case 51: 
            { Token token = new Token(Constants.INHERIT, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 106: break;
          case 52: 
            { Token token = new Token(Constants.REQUIRE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 107: break;
          case 53: 
            { Token token = new Token(Constants.FEATURE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 108: break;
          case 54: 
            { Token token = new Token(Constants.UNDEFINE, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 109: break;
          case 55: 
            { Token token = new Token(Constants.DEFFERD, yytext(), yyline + 1, yycolumn + 1); token.print("Keyword : "); return token;
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.getNextToken();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
